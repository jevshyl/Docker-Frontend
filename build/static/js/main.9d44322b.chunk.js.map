{"version":3,"sources":["config/Api.ts","Services/AuthorityService.ts","Services/UserService.ts","Contexts/ActiveUserContext.tsx","components/pages/LoginPage/LoginPage.tsx","components/atoms/NavButton.tsx","components/molecules/Navbar.tsx","Router/PrivateRoute.tsx","logo1.png","components/pages/HomePage.tsx","components/pages/UserPage/UserTable.tsx","components/molecules/UserForm/UserForm.tsx","components/pages/UserPage/UserPage.tsx","config/Authorities.ts","components/atoms/ElementCard.tsx","components/molecules/ListElementForm.tsx","Services/ListElementService.ts","components/molecules/Dialog.tsx","components/pages/ProfileListPage/ProfileListPage.tsx","components/pages/AdminPage/AdminPage.tsx","Router/Router.tsx","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","process","interceptors","request","use","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","authoritySet","Set","AuthorityService","initAuthoritySet","user","JSON","parse","roles","forEach","role","authorities","authority","add","name","hasAuthority","has","hasAuthorities","element","hasAnyAuthority","clearAuthorities","clear","UserService","getUser","async","data","get","userID","updateUser","put","id","addUser","post","then","res","getAllUsers","deleteUser","delete","USER_DATA_LOCAL_STORAGE_KEY","TOKEN_LOCAL_STORAGE_KEY","noContextProviderFound","Error","defaultContextValue","login","logout","setActiveUser","loadActiveUser","checkRole","ActiveUserContext","createContext","ActiveUserContextProvider","children","setUser","useState","storeUser","loadSavedUserData","navigate","useNavigate","updatedUser","setItem","stringify","resetAuthorization","useEffect","Provider","value","email","password","console","log","authorization","tokenString","replace","jwt","sub","finally","roleToCheck","some","validationSchema","Yup","shape","Login","btnstyle","margin","useContext","Grid","Paper","elevation","style","padding","height","width","initialValues","enableReinitialize","onSubmit","values","toLowerCase","catch","status","alert","validateOnChange","isInitialValid","props","handleSubmit","TextField","label","placeholder","fullWidth","required","autoFocus","onChange","handleChange","onBlur","handleBlur","errors","type","Button","color","variant","Typography","Link","href","NavButton","path","sx","backgroundColor","onClick","Navbar","activeUser","Box","display","alignItems","justifyContent","flexDirection","background","textAlign","PrivateRoute","requiredAuths","RouteComponent","activeUserContext","exp","Date","now","isLoggedIn","to","length","HomePage","fontFamily","fontSize","textShadow","component","src","logo","alt","maxWidth","transition","transform","UserTable","users","setUsers","map","Card","minWidth","CardContent","firstName","lastName","CardActions","size","handleEdit","handleDelete","UserForm","submitActionHandler","formik","useFormik","listElements","object","string","min","max","paddingTop","paddingRight","Boolean","touched","marginTop","marginRight","disabled","dirty","isValid","UserPage","userId","useParams","undefined","ElementCard","listElement","minHeigth","CardHeader","title","text","ListElementForm","onCancel","importance","creationDate","oneOf","setFieldValue","marginBottom","InputLabel","Select","labelId","MenuItem","ListElementService","updateListElement","addListElement","deleteListElement","Dialog","open","setOpen","dialogTitle","dialogContent","deleteAction","isEditing","setIsEditing","handleClose","onClose","DialogTitle","DialogContent","window","location","reload","gap","DialogActions","ProfileListPage","selectedElement","setSelectedElement","addElement","setAddElement","checkUser","container","spacing","index","item","xs","sm","md","AdminPage","Router","LoginPage","USER_DEACTIVATE","USER_MODIFY","SEE_ADMIN_PAGE","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9d44322b.chunk.js","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\n\r\n/**\r\n * isDev returns a boolean if the application is running in development-mode.\r\n */\r\nconst isDev = (): boolean => !process.env.NODE_ENV || process.env.NODE_ENV === \"development\";\r\n\r\n/**\r\n * Create an Axios instance for the api.\r\n */\r\nconst createAPI = (): AxiosInstance => {\r\n  return axios.create({ baseURL: process.env.REACT_APP_BASEURL });\r\n};\r\n\r\n/**\r\n * api constant is the axios-instance used for all requests to the rest-api.\r\n */\r\nconst api: AxiosInstance = createAPI();\r\n\r\n/**\r\n * Set the Authorization header on each request equal to the token which\r\n * is stored inside the localStorage if a user is authenticated.\r\n */\r\napi.interceptors.request.use(\r\n  (request) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      request.headers.Authorization = token;\r\n    }\r\n    return request;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Log outgoing requests if the environment is in development-mode\r\n */\r\napi.interceptors.request.use((request) => {\r\n  if (isDev() && request.method) {\r\n    const info = `REQUEST ${request.method.toLocaleUpperCase()} ${request.url}`;\r\n    if (request.method.toLocaleLowerCase() === \"get\") {\r\n      console.debug(info);\r\n    } else {\r\n      console.debug(info, request.data);\r\n    }\r\n  }\r\n  return request;\r\n}, Promise.reject);\r\n\r\n/**\r\n * Log incoming responses if the environment is in development-mode\r\n */\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    if (isDev() && response.config && response.config.method) {\r\n      console.debug(\r\n        `RESPONSE ${response.config.method.toLocaleUpperCase()} ${response.config.url}`,\r\n        response.data\r\n      );\r\n    }\r\n    return response;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default api;\r\n","import authorities from '../config/Authorities';\r\nimport { Authority } from '../types/models/Authority.model';\r\nimport { Role } from '../types/models/Role.model';\r\n\r\nconst authoritySet = new Set<authorities>();\r\n\r\nconst AuthorityService = {\r\n  initAuthoritySet: (\r\n    user = JSON.parse(localStorage.getItem('user') || '{}')\r\n  ) => {\r\n    const roles = user && user.roles ? user.roles : [];\r\n    roles.forEach((role: Role) => {\r\n      role.authorities.forEach((authority: Authority) => {\r\n        authoritySet.add(authority.name);\r\n      });\r\n    });\r\n  },\r\n  hasAuthority: (authority: authorities) => {\r\n    AuthorityService.initAuthoritySet();\r\n\r\n    return authoritySet.has(authority);\r\n  },\r\n  hasAuthorities: (authorities: authorities[]) => {\r\n    AuthorityService.initAuthoritySet();\r\n\r\n    for (const element of authorities) {\r\n      if (!authoritySet.has(element)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  },\r\n  hasAnyAuthority: (authorities: authorities[]) => {\r\n    for (const element of authorities) {\r\n      if (authoritySet.has(element)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  },\r\n  clearAuthorities: (): void => {\r\n    authoritySet.clear();\r\n  },\r\n};\r\n\r\nexport default AuthorityService;\r\n","import api from '../config/Api';\r\nimport { User } from '../types/models/User.model';\r\n\r\nconst UserService = {\r\n  getUser: async (userID: string): Promise<User> => {\r\n    const { data } = await api.get<User>(`/user/${userID}`);\r\n    return data;\r\n  },\r\n\r\n  updateUser: (user: User) => {\r\n    return api.put(`/user/${user.id}`, user);\r\n  },\r\n\r\n  addUser: (user: User) => {\r\n    return api.post('/user/registerUser', user).then((res) => {\r\n      return res.data;\r\n    });\r\n  },\r\n\r\n  getAllUsers: () => {\r\n    return api.get(`/user`);\r\n  },\r\n\r\n  deleteUser: (id: string) => {\r\n    return api.delete(`/user/${id}`);\r\n  },\r\n};\r\n\r\nexport default UserService;\r\n","import { createContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport api from \"../config/Api\";\r\nimport roles from \"../config/Roles\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport UserService from \"../Services/UserService\";\r\nimport { User } from \"../types/models/User.model\";\r\nimport { Nullable } from \"../types/Nullable\";\r\nimport * as jwt from \"jsonwebtoken\";\r\nimport {JwtPayload} from \"jsonwebtoken\";\r\n\r\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\r\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\r\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\r\n\r\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\r\nexport type ActiveUserContextType = {\r\n  user: Nullable<User>;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  setActiveUser: (user: User) => void;\r\n  loadActiveUser: () => void;\r\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\r\n};\r\n\r\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\r\nconst noContextProviderFound = () => {\r\n  throw new Error(\"No provider for the ActiveUserContext found\");\r\n};\r\n\r\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\r\nconst defaultContextValue: ActiveUserContextType = {\r\n  user: null,\r\n  login: noContextProviderFound,\r\n  logout: noContextProviderFound,\r\n  setActiveUser: noContextProviderFound,\r\n  loadActiveUser: noContextProviderFound,\r\n  checkRole: noContextProviderFound,\r\n};\r\n\r\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\r\nconst ActiveUserContext =\r\n  createContext<ActiveUserContextType>(defaultContextValue);\r\nexport default ActiveUserContext;\r\n\r\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\r\ntype ActiveUserContextProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\r\nexport const ActiveUserContextProvider = ({\r\n  children,\r\n}: ActiveUserContextProviderProps) => {\r\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\r\n  const loadSavedUserData = (): Nullable<User> => {\r\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\r\n    if (storeUser === null) return null;\r\n    return JSON.parse(storeUser);\r\n  };\r\n\r\n  // The following line defines the user state which is holding the user\r\n  // data inside this context.\r\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\r\n  const navigate = useNavigate();\r\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\r\n  const setActiveUser = (updatedUser: User) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\r\n      USER_DATA_LOCAL_STORAGE_KEY,\r\n      JSON.stringify(updatedUser)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\r\n  const resetAuthorization = () => {\r\n    // Reset the stored data inside the AuthorityService.\r\n    AuthorityService.clearAuthorities();\r\n    // Clear all data from the localStorage.\r\n    localStorage.clear();\r\n    // Set the user, which is stored inside the context to null.\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\r\n  const logout = () => {\r\n    // If no token is saved inside the local storage clear the localStorage directly\r\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\r\n      resetAuthorization();\r\n      return;\r\n    }\r\n    // If a token is present send a logout-request and clear the localStorage afterwards\r\n    api.get(\"/logout\").finally(resetAuthorization);\r\n    //navigate to login page\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\r\n  const login = async (email: string, password: string) => {\r\n    await api.post(\"user/login\", { email, password }).then((response: any) => {\r\n      console.log(response.headers.authorization);\r\n      localStorage.setItem(\r\n        TOKEN_LOCAL_STORAGE_KEY,\r\n        response.headers.authorization\r\n      );\r\n      const tokenString = response.headers.authorization.replace('Bearer ', '');\r\n      const token = jwt.decode(tokenString) as JwtPayload;\r\n        UserService.getUser(token.sub!).then((user: User) => {\r\n          setActiveUser(user);\r\n        })\r\n      return true;\r\n    });\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\r\n  const loadActiveUser = () => {\r\n    return user\r\n      ? UserService.getUser(user.id).then((res: any) => {\r\n          setActiveUser(res);\r\n        })\r\n      : null;\r\n  };\r\n\r\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\r\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\r\n  }\r\n\r\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n    if (token !== null) {\r\n      loadActiveUser();\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\r\n  useEffect(() => {\r\n    if (user !== null) {\r\n      AuthorityService.initAuthoritySet(user);\r\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <ActiveUserContext.Provider\r\n        value={{\r\n          user,\r\n          setActiveUser,\r\n          login,\r\n          logout,\r\n          loadActiveUser,\r\n          checkRole: activeUserHasRole,\r\n        }}\r\n      >\r\n        {children}\r\n      </ActiveUserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  Paper,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Link,\r\n} from '@mui/material';\r\nimport React, { useContext } from 'react';\r\n\r\nimport { Form, Formik } from 'formik';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport ActiveUserContext from '../../../Contexts/ActiveUserContext';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string(),\r\n  password: Yup.string(),\r\n});\r\n\r\nconst Login = () => {\r\n  const paperStyle = {\r\n    padding: 20,\r\n    height: '70vh',\r\n    width: 280,\r\n    margin: '20px auto',\r\n  };\r\n  const btnstyle = { margin: '8px 0' };\r\n  const navigate = useNavigate();\r\n  const { login } = useContext(ActiveUserContext);\r\n\r\n  const handleSubmit = (values: { email: string; password: string }) => {\r\n    login(values.email.toLowerCase(), values.password)\r\n      .then(() => {\r\n        console.log(values);\r\n\r\n        navigate('/');\r\n      })\r\n      .catch((error) => {\r\n        if (\r\n          (typeof error.response !== 'undefined' &&\r\n            error.response.status === 401) ||\r\n          error.response.status === 403\r\n        ) {\r\n          alert('invalid login');\r\n        } else {\r\n          alert('login Error');\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <Grid>\r\n      <Paper elevation={10} style={paperStyle}>\r\n        <Grid>\r\n          <h2>Sign In</h2>\r\n          <p>Default login:</p>\r\n          <p>email: admin@example.com</p>\r\n          <p>pw: 1234</p>\r\n        </Grid>\r\n\r\n        <Formik\r\n          initialValues={{\r\n            email: '',\r\n            password: '',\r\n          }}\r\n          enableReinitialize\r\n          validationSchema={validationSchema}\r\n          onSubmit={handleSubmit}\r\n          validateOnChange\r\n          isInitialValid\r\n        >\r\n          {(props) => (\r\n            <Form onSubmit={props.handleSubmit}>\r\n              <TextField\r\n                label='email'\r\n                id='email'\r\n                data-cy=\"email\"\r\n                placeholder='Enter username'\r\n                fullWidth\r\n                required\r\n                autoFocus\r\n                onChange={props.handleChange}\r\n                onBlur={props.handleBlur}\r\n                value={props.values.email}\r\n              />\r\n              {props.errors.email && (\r\n                <div id='feedback'>{props.errors.email}</div>\r\n              )}\r\n\r\n              <TextField\r\n                id='password'\r\n                label='password'\r\n                data-cy=\"password\"\r\n                placeholder='Enter password'\r\n                type='password'\r\n                fullWidth\r\n                required\r\n                onChange={props.handleChange}\r\n                onBlur={props.handleBlur}\r\n                value={props.values.password}\r\n              />\r\n              {props.errors.password && (\r\n                <div id='feedback'>{props.errors.password}</div>\r\n              )}\r\n\r\n              <Button\r\n                type='submit'\r\n                data-cy=\"submit-login\"\r\n                color='primary'\r\n                variant='contained'\r\n                style={btnstyle}\r\n                fullWidth\r\n              >\r\n                Sign in\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        <Typography>\r\n          <Link href='#'>Forgot password ?</Link>\r\n        </Typography>\r\n        <Typography>\r\n          {' '}\r\n          Do you have an account ?<Link href='#'>Sign Up</Link>\r\n        </Typography>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import {Button} from \"@mui/material\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\ntype NavButtonProps = {\r\n    path: string;\r\n    name: string;\r\n};\r\n\r\nexport default function NavButton({ path, name }: Readonly<NavButtonProps>) {\r\n    const navigate = useNavigate();\r\n\r\n\r\n    return (\r\n        <Button\r\n            variant=\"contained\"\r\n            sx={{\r\n                backgroundColor: '#00d4ff',\r\n                '&:hover': {backgroundColor: '#0f0fcf'},\r\n            }}\r\n            onClick={() => navigate(`/${path}`)}\r\n        >\r\n            {name}\r\n        </Button>\r\n    );\r\n}\r\n","import {Box} from '@mui/system';\r\nimport React, {useContext} from \"react\";\r\nimport NavButton from \"../atoms/NavButton\";\r\nimport ActiveUserContext from \"../../Contexts/ActiveUserContext\";\r\nimport {Button} from \"@mui/material\";\r\n\r\nexport default function Navbar() {\r\n\r\n    const activeUser = useContext(ActiveUserContext);\r\n    const {checkRole} = useContext(ActiveUserContext);\r\n\r\n    return (\r\n        <Box\r\n            display=\"flex\"\r\n            data-cy=\"navbar\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-around\"\r\n            flexDirection=\"row\"\r\n            height=\"100px\"\r\n            sx={{\r\n                background: 'linear-gradient(135deg, ' +\r\n                    '#0f0fcf, #00d4ff)',\r\n                color: '#fff',\r\n                textAlign: 'center',\r\n            }}\r\n        >\r\n            {!activeUser.user && (\r\n                <NavButton path={\"login\"} name={\"Login\"}/>\r\n            )}\r\n            {activeUser.user && (\r\n                <>\r\n                    {checkRole(\"ADMIN\") && (\r\n                        <NavButton path={\"admin\"} name={\"Admin\"}/>\r\n                    )}\r\n                    <NavButton path={\"\"} name={\"Home\"}/>\r\n                    <NavButton path={\"users\"} name={\"Users\"}/>\r\n                    <NavButton path={`profileList/${activeUser.user?.id}`} name={\"Profile Page\"} data-cy=\"nav-own-profilePage\"/>\r\n                    <Button onClick={activeUser.logout}>Logout</Button>\r\n                </>\r\n            )}\r\n        </Box>\r\n    );\r\n}\r\n","import React, {useContext} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport ActiveUserContext from '../Contexts/ActiveUserContext';\r\nimport AuthorityService from '../Services/AuthorityService';\r\nimport authorities from '../config/Authorities';\r\nimport Navbar from \"../components/molecules/Navbar\";\r\n\r\ninterface Props {\r\n    element: React.ReactElement;\r\n    requiredAuths: authorities[];\r\n}\r\n\r\ntype JWTType = {\r\n    iss: string;\r\n    exp: number;\r\n};\r\n\r\nconst PrivateRoute: React.FC<Props> = ({\r\n                                           requiredAuths,\r\n                                           element: RouteComponent,\r\n                                       }) => {\r\n    const activeUserContext = useContext(ActiveUserContext);\r\n    /**\r\n     * isLoggedIn checks if the token, which is saved inside the localStorage,\r\n     * exists, isn't expired yet and has been issued by the correct issuer.\r\n     * If all of the above is true the user is seen as logged in.\r\n     */\r\n    const isLoggedIn = () => {\r\n        let tokenString = localStorage.getItem('token');\r\n        if (!tokenString) {\r\n            console.error('no token found');\r\n            return false;\r\n        }\r\n        tokenString = tokenString.replace('Bearer ', '');\r\n        const token: JWTType = jwt.decode(tokenString) as JWTType;\r\n        // Check if token does not exist or doesn't have an expiration claim or is expired.\r\n        if (!token || !token.exp || token.exp < Date.now() / 1000) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * If the user is not logged in call activeUserContext.logout, which destroys\r\n     * all locally saved user data and redirects to /login.\r\n     */\r\n    if (!isLoggedIn()) {\r\n        activeUserContext.logout();\r\n        return <Navigate to='/login' replace={true}/>;\r\n    }\r\n    /**\r\n     * Check if the active user has at least 1 of the needed authorities.\r\n     * If no authorities are needed true is returned.\r\n     */\r\n    let hasNeededAuthorities =\r\n        requiredAuths.length === 0 ||\r\n        requiredAuths.some(AuthorityService.hasAuthority);\r\n\r\n    /**\r\n     * If the user doesn't possess the needed authorities Redirect the user to\r\n     * /unauthorized\r\n     */\r\n    if (!hasNeededAuthorities) {\r\n        return <Navigate to='/unauthorized' replace={true}/>;\r\n    }\r\n\r\n    // All checks passed\r\n    return (\r\n        //Pagelayout puts the Navigation, Menu etc. around the component\r\n        <div>\r\n            <Navbar/>\r\n            {RouteComponent}\r\n        </div>\r\n    );\r\n};\r\nexport default PrivateRoute;\r\n","export default __webpack_public_path__ + \"static/media/logo1.a04327d3.png\";","import {Box} from '@mui/system';\r\nimport logo from '../../logo1.png';\r\nimport Navbar from \"../molecules/Navbar\";\r\n\r\nexport default function HomePage() {\r\n\r\n    return (\r\n        <>\r\n            <Navbar/>\r\n            <Box\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                flexDirection=\"column\"\r\n                height=\"100vh\"\r\n                sx={{\r\n                    background: 'linear-gradient(135deg, ' +\r\n                        '#0f0fcf, #00d4ff)',\r\n                    color: '#fff',\r\n                    textAlign: 'center',\r\n                }}\r\n            >\r\n                <h1 style={{\r\n                    fontFamily: 'Arial, sans-serif',\r\n                    fontSize: '2.5rem',\r\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.3)'\r\n                }}>\r\n                    Welcome to the Homepage\r\n                </h1>\r\n                <Box\r\n                    component=\"img\"\r\n                    src={logo}\r\n                    alt=\"logo\"\r\n                    sx={{\r\n                        maxWidth: '350px',\r\n                        transition: 'transform 0.3s ease-in-out',\r\n                        '&:hover': {\r\n                            transform: 'scale(1.1)',\r\n                        },\r\n                    }}/>\r\n            </Box></>\r\n    );\r\n}\r\n","import Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport {useContext, useEffect, useState} from 'react';\r\nimport {User} from '../../../types/models/User.model';\r\nimport UserService from '../../../Services/UserService';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport ActiveUserContext from \"../../../Contexts/ActiveUserContext\";\r\n\r\nconst UserTable = () => {\r\n    const navigate = useNavigate();\r\n    const [users, setUsers] = useState<User[]>([]);\r\n    const {checkRole} = useContext(ActiveUserContext);\r\n\r\n    useEffect(() => {\r\n        UserService.getAllUsers().then((data) => {\r\n            setUsers(data.data);\r\n        });\r\n    }, []);\r\n\r\n    const handleAdd = () => {\r\n        navigate('../useredit/');\r\n    };\r\n\r\n    const handleEdit = (id: string) => {\r\n        navigate('../useredit/' + id);\r\n    };\r\n\r\n    const handleDelete = (id: string) => {\r\n        UserService.deleteUser(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {users.map((user) => (\r\n                <div key={user.id}>\r\n                    <Card sx={{minWidth: 275}}>\r\n                        <CardContent data-cy=\"userCard\">\r\n                            {user.firstName} {user.lastName}\r\n                            {checkRole(\"ADMIN\") && user.email}\r\n                            <CardActions>\r\n                                {checkRole(\"ADMIN\") && (\r\n                                    <>\r\n                                        <Button\r\n                                            size='small'\r\n                                            color='primary'\r\n                                            variant='contained'\r\n                                            onClick={() => handleEdit(user.id)}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n\r\n                                        <Button\r\n                                            size='small'\r\n                                            color='error'\r\n                                            variant='contained'\r\n                                            onClick={() => handleDelete(user.id)}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </>\r\n                                )}\r\n                                <Button\r\n                                    size='small'\r\n                                    data-cy=\"view-button\"\r\n                                    color='primary'\r\n                                    variant='contained'\r\n                                    onClick={() => navigate(`../profileList/${user?.id}`)}\r\n                                >\r\n                                    View\r\n                                </Button>\r\n                            </CardActions>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            ))}\r\n            {checkRole(\"ADMIN\") && (\r\n                <Button\r\n                    size='small'\r\n                    color='success'\r\n                    variant='contained'\r\n                    onClick={handleAdd}\r\n                >\r\n                    Add\r\n                </Button>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserTable;\r\n","import { useFormik } from 'formik';\r\nimport { User } from '../../../types/models/User.model';\r\nimport { Box, Button, TextField } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { object, string } from 'yup';\r\n\r\ninterface UserProps {\r\n  user: User;\r\n  submitActionHandler: (values: User) => void;\r\n}\r\n\r\nconst UserForm = ({ user, submitActionHandler }: UserProps) => {\r\n  const navigate = useNavigate();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      id: user.id,\r\n      lastName: user ? user.lastName : '',\r\n      firstName: user ? user.firstName : '',\r\n      email: user ? user.email : '',\r\n      roles: user ? user.roles : [],\r\n      listElements: user ? user.listElements : []\r\n    },\r\n    validationSchema: object({\r\n      firstName: string().required().min(2).max(50),\r\n      lastName: string().required().min(2).max(50),\r\n      email: string().required().email(),\r\n    }),\r\n    onSubmit: (values: User) => {\r\n      submitActionHandler(values);\r\n    },\r\n    enableReinitialize: true,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <Box sx={{ paddingTop: '15px' }}>\r\n          <TextField\r\n            id='firstName'\r\n            label='Firstname'\r\n            variant='outlined'\r\n            sx={{ paddingRight: '10px' }}\r\n            onBlur={formik.handleBlur}\r\n            onChange={formik.handleChange}\r\n            error={Boolean(formik.touched.firstName && formik.errors.firstName)}\r\n            value={formik.values.firstName}\r\n          />\r\n          {formik.errors.firstName && formik.touched.firstName ? (\r\n            <div style={{ color: 'red' }}>{formik.errors.firstName}</div>\r\n          ) : null}\r\n          <TextField\r\n            id='lastName'\r\n            label='Lastname'\r\n            variant='outlined'\r\n            sx={{ paddingRight: '10px' }}\r\n            onBlur={formik.handleBlur}\r\n            onChange={formik.handleChange}\r\n            error={Boolean(formik.touched.lastName && formik.errors.lastName)}\r\n            value={formik.values.lastName}\r\n          />\r\n          {formik.errors.lastName && formik.touched.lastName ? (\r\n            <div style={{ color: 'red' }}>{formik.errors.lastName}</div>\r\n          ) : null}\r\n          <TextField\r\n            id='email'\r\n            label='E-Mail'\r\n            variant='outlined'\r\n            onBlur={formik.handleBlur}\r\n            onChange={formik.handleChange}\r\n            error={Boolean(formik.touched.email && formik.errors.email)}\r\n            value={formik.values.email}\r\n          />\r\n\r\n          {formik.errors.email && formik.touched.email ? (\r\n            <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n          ) : null}\r\n        </Box>\r\n        <div>\r\n          <Button\r\n            sx={{ marginTop: '15px', marginRight: '10px' }}\r\n            variant='contained'\r\n            color='success'\r\n            type='submit'\r\n            disabled={!(formik.dirty && formik.isValid)}\r\n          >\r\n            {user.id && 'Save'}\r\n            {!user.id && 'Add'}\r\n          </Button>\r\n          <Button\r\n            sx={{ marginTop: '15px' }}\r\n            variant='contained'\r\n            color='error'\r\n            onClick={() => {\r\n              navigate('/users');\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import { useNavigate, useParams } from 'react-router-dom';\r\nimport { User } from '../../../types/models/User.model';\r\nimport UserService from '../../../Services/UserService';\r\nimport UserForm from '../../molecules/UserForm/UserForm';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst UserPage = () => {\r\n  const navigate = useNavigate();\r\n  const { userId } = useParams();\r\n  const [user, setUser] = useState<User>({\r\n    id: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    roles: [],\r\n    listElements: []\r\n  });\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (userId) {\r\n        UserService.getUser(userId).then((res) => {\r\n          return setUser(res);\r\n        });\r\n      }\r\n    };\r\n  }, [userId]);\r\n\r\n  const submitActionHandler = (values: User) => {\r\n    if (userId !== undefined) {\r\n      UserService.updateUser(values).then(() => {\r\n        navigate('../users');\r\n      });\r\n    } else {\r\n      UserService.addUser(values).then(() => {\r\n        navigate('/users');\r\n      });\r\n    }\r\n  };\r\n\r\n  return <UserForm user={user} submitActionHandler={submitActionHandler} />;\r\n};\r\nexport default UserPage;\r\n","enum authorities {\r\n/*\r\n  add your authorities here. E.g:\r\n*/\r\n  USER_MODIFY = \"USER_MODIFY\",\r\n  USER_DEACTIVATE = \"USER_DEACTIVATE\",\r\n  DEFAULT = \"DEFAULT\",\r\n  SEE_ADMIN_PAGE=\"SEE_ADMIN_PAGE\",\r\n  LIST_ELEMENT_CREATE=\"LIST_ELEMENT_CREATE\",\r\n  LIST_ELEMENT_DELETE=\"LIST_ELEMENT_DELETE\",\r\n  LIST_ELEMENT_MODIFY=\"LIST_ELEMENT_MODIFY\",\r\n}\r\n\r\nexport default authorities;\r\n","import React from \"react\";\r\nimport {Button, CardHeader} from \"@mui/material\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport {ListElement} from \"../../types/models/ListElement.model\";\r\n\r\n\r\ninterface ElementCardProps {\r\n    listElement: ListElement;\r\n    onClick: () => void;\r\n}\r\n\r\n\r\nexport default function ElementCard({listElement, onClick}: ElementCardProps) {\r\n\r\n    return (\r\n        <Card sx={{minHeigth: \"100px\", height: \"100%\"}}>\r\n            <CardHeader title={listElement.title} />\r\n            <CardContent>\r\n                {listElement.text}\r\n            </CardContent>\r\n            <Button onClick={onClick} variant=\"contained\">View List</Button>\r\n        </Card>\r\n    );\r\n}\r\n","import { useFormik } from 'formik';\r\nimport { object, string } from 'yup';\r\nimport { ListElement } from \"../../types/models/ListElement.model\";\r\nimport { Box, Button, TextField, InputLabel, Select, MenuItem } from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport UserService from \"../../Services/UserService\";\r\nimport { User } from \"../../types/models/User.model\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\ninterface ListElementFormProps {\r\n    listElement?: ListElement;\r\n    submitActionHandler: (values: ListElement) => void;\r\n    onCancel?: () => void;\r\n}\r\n\r\nconst ListElementForm = ({ listElement, submitActionHandler, onCancel }: ListElementFormProps) => {\r\n    const { userId } = useParams();\r\n    const [user, setUser] = useState<User | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            UserService.getUser(userId).then(res => setUser(res));\r\n        }\r\n    }, [userId]);\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            id: listElement?.id,\r\n            title: listElement?.title || '',\r\n            text: listElement?.text || '',\r\n            importance: listElement?.importance || 'LOW',\r\n            userId: user?.id || '',\r\n            creationDate: listElement?.creationDate\r\n        },\r\n        validationSchema: object({\r\n            title: string().required('Title is required').min(2, 'Too short').max(254, 'Too long'),\r\n            text: string().required('Text is required').min(2, 'Too short').max(200, 'Too long'),\r\n            importance: string().required('Importance is required').oneOf(['LOW', 'MEDIUM', 'HIGH']),\r\n        }),\r\n        onSubmit: values => submitActionHandler(values),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (user?.id) {\r\n            formik.setFieldValue('userId', user.id);\r\n        }\r\n    }, [user?.id]);\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <Box sx={{ paddingTop: '15px' }}>\r\n                <TextField\r\n                    id='title'\r\n                    data-cy={\"title\"}\r\n                    label='Title'\r\n                    name=\"title\"\r\n                    variant='outlined'\r\n                    sx={{ paddingRight: '10px', marginBottom: '10px' }}\r\n                    onBlur={formik.handleBlur}\r\n                    onChange={formik.handleChange}\r\n                    error={Boolean(formik.touched.title && formik.errors.title)}\r\n                    value={formik.values.title}\r\n                />\r\n                {formik.touched.title && formik.errors.title && (\r\n                    <div style={{ color: 'red' }}>{formik.errors.title}</div>\r\n                )}\r\n\r\n                <TextField\r\n                    id='text'\r\n                    data-cy={\"text\"}\r\n                    label='Text'\r\n                    name=\"text\"\r\n                    variant='outlined'\r\n                    sx={{ paddingRight: '10px', marginBottom: '10px' }}\r\n                    onBlur={formik.handleBlur}\r\n                    onChange={formik.handleChange}\r\n                    error={Boolean(formik.touched.text && formik.errors.text)}\r\n                    value={formik.values.text}\r\n                />\r\n                {formik.touched.text && formik.errors.text && (\r\n                    <div style={{ color: 'red' }}>{formik.errors.text}</div>\r\n                )}\r\n\r\n                <InputLabel id=\"importance-label\">Importance</InputLabel>\r\n                <Select\r\n                    labelId=\"importance-label\"\r\n                    data-cy={\"select\"}\r\n                    id=\"importance\"\r\n                    name=\"importance\"\r\n                    value={formik.values.importance}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                >\r\n                    <MenuItem value=\"LOW\">Low</MenuItem>\r\n                    <MenuItem value=\"MEDIUM\">Medium</MenuItem>\r\n                    <MenuItem value=\"HIGH\">High</MenuItem>\r\n                </Select>\r\n                {formik.touched.importance && formik.errors.importance && (\r\n                    <div style={{ color: 'red' }}>{formik.errors.importance}</div>\r\n                )}\r\n\r\n                <Box sx={{ marginTop: '15px' }}>\r\n                    <Button\r\n                        variant='contained'\r\n                        data-cy=\"submit\"\r\n                        color='success'\r\n                        type='submit'\r\n                        disabled={!(formik.dirty && formik.isValid)}\r\n                        sx={{ marginRight: '10px' }}\r\n                    >\r\n                        {formik.values.id ? 'Save' : 'Add'}\r\n                    </Button>\r\n\r\n                    {onCancel && (\r\n                        <Button\r\n                            variant='contained'\r\n                            color='error'\r\n                            onClick={onCancel}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n            </Box>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ListElementForm;\r\n","import api from '../config/Api';\r\nimport {ListElement} from \"../types/models/ListElement.model\";\r\n\r\nconst ListElementService = {\r\n    updateListElement: async (listElement: ListElement) => {\r\n        return await api.put(`/list-element/${listElement.id}`, listElement);\r\n    },\r\n\r\n    addListElement: async (listElement: ListElement) => {\r\n        const res = await api.post(`/list-element`, listElement);\r\n        return res.data;\r\n    },\r\n    deleteListElement: (id: string) => {\r\n        return api.delete(`/list-element/${id}`);\r\n    },\r\n};\r\n\r\nexport default ListElementService;\r\n","import {Box, Button, Dialog as MuiDialog, DialogActions, DialogContent, DialogTitle} from \"@mui/material\";\r\nimport {useContext, useState} from \"react\";\r\nimport ActiveUserContext from \"../../Contexts/ActiveUserContext\";\r\nimport {ListElement} from \"../../types/models/ListElement.model\";\r\nimport ListElementForm from \"../molecules/ListElementForm\";\r\nimport ListElementService from \"../../Services/ListElementService\";\r\n\r\ntype DialogProps = {\r\n    id?: string;\r\n    open: boolean;\r\n    setOpen?: (setOpen: boolean) => void;\r\n    dialogTitle?: string;\r\n    dialogContent?: string;\r\n    importance?: string;\r\n    listElement?: ListElement;\r\n    deleteAction?: () => void;\r\n}\r\n\r\nconst Dialog = ({\r\n                    id,\r\n                    open,\r\n                    setOpen,\r\n                    dialogTitle,\r\n                    dialogContent,\r\n                    importance,\r\n                    listElement,\r\n                    deleteAction,\r\n                }: DialogProps) => {\r\n\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const handleClose = () => setOpen?.(false);\r\n\r\n    const {checkRole, user: activeUser} = useContext(ActiveUserContext);\r\n\r\n    const checkUser = () => {\r\n        if (checkRole(\"ADMIN\")) return true;\r\n        return id === activeUser?.id;\r\n\r\n    }\r\n\r\n    return (\r\n        <MuiDialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            sx={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\"}}\r\n        >\r\n            <DialogTitle>{dialogTitle}</DialogTitle>\r\n\r\n            <DialogContent>\r\n                {isEditing && listElement ? (\r\n                    <ListElementForm\r\n                        listElement={listElement}\r\n                        submitActionHandler={(values: ListElement) => {\r\n                            ListElementService.updateListElement(values).then(() => {\r\n                                setIsEditing(false);\r\n                                window.location.reload();\r\n                                handleClose();\r\n                            });\r\n                        }}\r\n                        onCancel={() => setIsEditing(false)}\r\n                    />\r\n                ) : (\r\n                    <Box\r\n                        sx={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            gap: 2,\r\n                            flexDirection: \"column\"\r\n                        }}\r\n                    >\r\n                        <Box>{dialogContent}</Box>\r\n                        <Box>Importance: {importance}</Box>\r\n                    </Box>\r\n                )}\r\n            </DialogContent>\r\n\r\n            {!isEditing && (\r\n                <DialogActions>\r\n                    <Box sx={{display: \"flex\", width: \"100%\", justifyContent: \"space-between\"}}>\r\n                        {checkUser() && listElement && (\r\n                            <Box sx={{display: \"flex\", gap: 1}}>\r\n                                <Button onClick={() => setIsEditing(true)}>Update</Button>\r\n                                <Button onClick={deleteAction} color=\"error\">Delete</Button>\r\n                            </Box>\r\n                        )}\r\n\r\n                        <Box sx={{display: \"flex\", gap: 1}}>\r\n                            <Button onClick={handleClose}>Cancel</Button>\r\n                        </Box>\r\n                    </Box>\r\n                </DialogActions>\r\n            )}\r\n        </MuiDialog>\r\n    );\r\n}\r\n\r\nexport default Dialog;\r\n","import {Box} from '@mui/system';\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport {User} from \"../../../types/models/User.model\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport UserService from \"../../../Services/UserService\";\r\nimport {Button, Grid} from \"@mui/material\";\r\nimport ElementCard from \"../../atoms/ElementCard\";\r\nimport Dialog from \"../../molecules/Dialog\";\r\nimport {ListElement} from \"../../../types/models/ListElement.model\";\r\nimport ListElementForm from \"../../molecules/ListElementForm\";\r\nimport ListElementService from \"../../../Services/ListElementService\";\r\nimport ActiveUserContext from \"../../../Contexts/ActiveUserContext\";\r\n\r\nexport default function ProfileListPage() {\r\n    const [user, setUser] = useState<User>({\r\n        id: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        roles: [],\r\n        listElements: []\r\n    });\r\n\r\n    const {userId} = useParams();\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            UserService.getUser(userId).then((res) => {\r\n                return setUser(res);\r\n            });\r\n        }\r\n    }, [userId]);\r\n\r\n    const submitActionHandler = (values: ListElement) => {\r\n        ListElementService.addListElement(values).then(res => {\r\n            const newElement = res.data;\r\n            if (!newElement) return;\r\n            setAddElement(null);\r\n        });\r\n        window.location.reload();\r\n    };\r\n\r\n    const deleteActionHandler = () => {\r\n        if (selectedElement?.id) {\r\n            ListElementService.deleteListElement(selectedElement.id).then(() => {\r\n                setOpen(false);\r\n            });\r\n        }\r\n        window.location.reload();\r\n    };\r\n\r\n    const [open, setOpen] = useState<boolean>(false);\r\n    const [selectedElement, setSelectedElement] = useState<ListElement | null>(null);\r\n    const [addElement, setAddElement] = useState<ListElement | null>(null);\r\n    const {checkRole} = useContext(ActiveUserContext);\r\n    const activeUser = useContext(ActiveUserContext);\r\n\r\n    const checkUser = () => {\r\n        return user.id === activeUser?.user?.id;\r\n\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            display=\"flex\"\r\n            flexDirection=\"column\"\r\n            height=\"100vh\"\r\n            sx={{\r\n                background: 'linear-gradient(135deg, ' +\r\n                    '#0f0fcf, #00d4ff)',\r\n                color: '#fff',\r\n                textAlign: 'center',\r\n            }}\r\n        >\r\n            <Dialog\r\n                id={user?.id}\r\n                open={open}\r\n                setOpen={setOpen}\r\n                dialogTitle={selectedElement?.title}\r\n                dialogContent={selectedElement?.text}\r\n                importance={selectedElement?.importance}\r\n                listElement={selectedElement || undefined}\r\n                deleteAction={deleteActionHandler}\r\n            />\r\n\r\n            {checkUser() && checkRole(\"USER\") && (\r\n\r\n                <Box sx={{margin: '20px 0'}}>\r\n                    <Button\r\n                        data-cy=\"addListElement\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() =>\r\n                            setAddElement({id: '', title: '', text: '', importance: ''})\r\n                        }\r\n                    >\r\n                        Add New List Element\r\n                    </Button>\r\n                </Box>\r\n            )}\r\n            {addElement && (\r\n                <ListElementForm\r\n                    submitActionHandler={submitActionHandler}\r\n                />\r\n            )}\r\n            <Box\r\n                display=\"flex\"\r\n                alignItems=\"flex-start\"\r\n                justifyContent=\"flex-start\"\r\n                margin=\"25px\"\r\n                flexDirection=\"column\"\r\n                height=\"250px\"\r\n                sx={{\r\n                    color: '#fff',\r\n                    textAlign: 'center',\r\n                }}>\r\n                <h3>Name: {user?.firstName} {user?.lastName}</h3>\r\n            </Box>\r\n\r\n            <Grid container spacing={2}>\r\n                {user?.listElements?.map((element, index) => (\r\n                    <Grid item xs={12} sm={6} md={4} key={element.id || index}>\r\n                        <ElementCard\r\n                            listElement={element}\r\n                            onClick={() => {\r\n                                setSelectedElement(element);\r\n                                setOpen(true);\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </Box>\r\n    );\r\n}\r\n","import {Box} from '@mui/system';\r\n\r\nexport default function AdminPage () {\r\n\r\n    return (\r\n\r\n            <Box\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                flexDirection=\"column\"\r\n                height=\"100vh\"\r\n                sx={{\r\n                    background: 'linear-gradient(135deg, ' +\r\n                        '#0f0fcf, #00d4ff)',\r\n                    color: '#fff',\r\n                    textAlign: 'center',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <h1>Welcome to admin page</h1>\r\n                </Box>\r\n\r\n            </Box>\r\n    );\r\n}\r\n","import {Route, Routes} from 'react-router-dom';\r\nimport LoginPage from '../components/pages/LoginPage/LoginPage';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport HomePage from '../components/pages/HomePage';\r\nimport UserTable from '../components/pages/UserPage/UserTable';\r\nimport UserPage from '../components/pages/UserPage/UserPage';\r\nimport authorities from '../config/Authorities';\r\nimport ProfileListPage from \"../components/pages/ProfileListPage/ProfileListPage\";\r\nimport AdminPage from \"../components/pages/AdminPage/AdminPage\";\r\n\r\n/**\r\n * Router component renders a route switch with all available pages\r\n */\r\n\r\nconst Router = () => {\r\n\r\n    return (\r\n        <Routes>\r\n            <Route path={'/'} element={<HomePage/>}/>\r\n            <Route path={'/login'} element={<LoginPage/>}/>\r\n\r\n            <Route\r\n                path={'/users'}\r\n                element={<PrivateRoute requiredAuths={[]} element={<UserTable/>}/>}\r\n            />\r\n            <Route\r\n                path='/useredit'\r\n                element={\r\n                    <PrivateRoute\r\n                        requiredAuths={[authorities.USER_DEACTIVATE, authorities.USER_MODIFY]}\r\n                        element={<UserPage/>}\r\n                    ></PrivateRoute>\r\n                }\r\n            />\r\n\r\n            <Route\r\n                path='/profileList/:userId'\r\n                element={\r\n                    <PrivateRoute\r\n                        requiredAuths={[]}\r\n                        element={<ProfileListPage/>}\r\n                    ></PrivateRoute>\r\n                }\r\n            />\r\n\r\n            <Route\r\n                path='/admin'\r\n                element={\r\n                    <PrivateRoute\r\n                        requiredAuths={[authorities.SEE_ADMIN_PAGE]}\r\n                        element={<AdminPage/>}\r\n                    ></PrivateRoute>\r\n                }\r\n            />\r\n\r\n            <Route\r\n                path='/useredit/:userId'\r\n                element={\r\n                    <PrivateRoute\r\n                        requiredAuths={[authorities.USER_MODIFY]}\r\n                        element={<UserPage/>}\r\n                    ></PrivateRoute>\r\n                }\r\n            />\r\n\r\n            <Route path='*' element={<div>Not Found</div>}/>\r\n        </Routes>\r\n    );\r\n};\r\n\r\nexport default Router;\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport { ActiveUserContextProvider } from './Contexts/ActiveUserContext';\r\nimport Router from './Router/Router';\r\n\r\nfunction App() {\r\n  return (\r\n    <ActiveUserContextProvider>\r\n      <Router />\r\n    </ActiveUserContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}